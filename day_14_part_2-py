import hashlib, re
salt = "yjdafjpo"
keys = []
i = 0


class Hasher(object):

    def __init__(self):
        self.saved = {}

    def hash_x_times(self, salt, index, x):
        try:
            key = self.saved[index]
        except KeyError:
            key = salt + str(index)
            for i in range(x):
                key = hashlib.md5(key.encode("utf-8")).hexdigest()
            self.saved[index] = key
        return key


h = Hasher()
while len(keys) < 64:
    first_key = h.hash_x_times(salt, i, 2017)

    m1 = re.search(r'(.)\1{2}', first_key)

    if m1:
        for j in range(i + 1, i + 1001):
            second_key = h.hash_x_times(salt, j, 2017)
            m2 = re.search(r'(.)\1{4}', second_key)
            if m2:
                if m2.group()[:3] == m1.group():
                    keys.append((i, first_key))
                    print(i, first_key)
                    break
    i += 1
print("64th key found at index: ", keys[-1][0])
